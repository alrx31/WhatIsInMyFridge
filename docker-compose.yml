version: '3.8'
networks:
  entityservicenetwork:
    driver: bridge


services:
  
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - identityservice
      - fridgeservice
      - productsservice
    networks:
      - entityservicenetwork

  identityservice:
    build:
      context: ./IdentityService
      dockerfile: Dockerfile        
    ports:
      - "8080:8080"
      - "8081:8081" 
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=UsersDb;Username=alex;Password=postgres123"
    depends_on:
      - postgres 
      - redis
      - kafka
    volumes:
      - /var/log/identityservice:/var/log/identityservice
    networks:
      - entityservicenetwork

  fridgeservice:
    build:
      context: ./FridgeService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=FridgeDb;Username=alex;Password=postgres123"
    depends_on:
      - identityservice
    volumes:
      - /var/log/fridgeservice:/var/log/fridgeservice
    networks:
      - entityservicenetwork

  productsservice:
    build:
      context: ./ProdutsService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
      - "8084:8084"
    environment:
      ConnectionStrings__MongoDbConnection: "mongodb://mongo:27017/ProductsDB"
    depends_on:
      - mongo
      - fridgeservice
    volumes:
      - /var/log/productsservice:/var/log/productsservice
    networks:
      - entityservicenetwork
  
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_NAMES: INSIDE,OUTSIDE
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - ./kafka_logs:/var/log/kafka
    depends_on:
      - zookeeper
    networks:
      - entityservicenetwork

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: alex
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: UsersDb,FridgeDb,HangFireDb
    ports:
      - "5432:5432"
    volumes:
         - postgres-data:/var/lib/postgresql/data
         - ./postgres_logs:/var/log/postgresql
    networks:
      - entityservicenetwork
    
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongodb_logs:/var/log/mongodb
    networks:
      - entityservicenetwork

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis_logs:/var/log/redis
    networks:
      - entityservicenetwork
    
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - entityservicenetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - entityservicenetwork

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.9.0
    restart: always
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - entityservicenetwork

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.9.0
    container_name: filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log/nginx:/var/log/nginx:ro
      - /var/log/identityservice:/var/log/identityservice:ro
      - /var/log/fridgeservice:/var/log/fridgeservice:ro
      - /var/log/productsservice:/var/log/productsservice:ro
      - /var/lib/kafka/logs:/var/lib/kafka/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - elasticsearch
      - kibana
    networks:
      - entityservicenetwork




volumes:
  postgres-data:
  mongo-data:
  elasticsearch-data-volume:
    driver: local